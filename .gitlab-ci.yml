stages:
  - build
  - deploy

variables:
  DOCKER_REGISTRY: registry.gitlab.com
  FRONTEND_IMAGE: $DOCKER_REGISTRY/rezav/rezaverse/frontend
  BACKEND_IMAGE: $DOCKER_REGISTRY/rezav/rezaverse/backend

before_script:
  - echo "Setting up Docker..."
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $DOCKER_REGISTRY

# Build Frontend
build_frontend:
  stage: build
  image: node:18  # Use Node.js image for building React
  script:
    - echo "Building React frontend..."
    - cd frontend
    - npm install
    - npm run build
    - cd ..
  artifacts:
    paths:
      - frontend/build/  # Save the built frontend files
  only:
    - main

# Build Backend
build_backend:
  stage: build
  image: golang:1.21  # Use Go image for building the backend
  script:
    - echo "Building Go backend..."
    - cd backend
    - go build -o rezaverse .
    - cd ..
  artifacts:
    paths:
      - backend/rezaverse  # Save the compiled Go binary
  only:
    - main

# Build and Push Docker Images
build_docker_images:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Building and pushing Docker images..."
    - docker build -t $FRONTEND_IMAGE -f frontend/Dockerfile .
    - docker build -t $BACKEND_IMAGE -f backend/Dockerfile .
    - docker push $FRONTEND_IMAGE
    - docker push $BACKEND_IMAGE
  only:
    - main

# Deploy to GitLab Pages (Optional)
pages:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Deploying frontend to GitLab Pages..."
    - mkdir public
    - cp -r frontend/build/* public/
  artifacts:
    paths:
      - public
  only:
    - main

# Deploy Backend (Optional)
deploy_backend:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Deploying backend..."
    - docker run -d --name rezaverse-backend -p 8080:8080 $BACKEND_IMAGE
  only:
    - main