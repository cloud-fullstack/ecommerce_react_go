image: 'docker:latest'
services:
  - 'docker:dind'
stages:
  - build
  - deploy
variables:
  CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  FRONTEND_IMAGE: $CI_REGISTRY_IMAGE/frontend
  BACKEND_IMAGE: $CI_REGISTRY_IMAGE/backend
  DB_HOST: $CI_COMMIT_REF_NAME
  DB_PORT: $CI_COMMIT_REF_NAME
  DB_USER: $CI_COMMIT_REF_NAME
  DB_PASSWORD: $CI_COMMIT_REF_NAME
  DB_NAME: $CI_COMMIT_REF_NAME
  DB_SSLMODE: $CI_COMMIT_REF_NAME

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

build_frontend:
  stage: build
  script:
    - echo "Building frontend Docker image..."
    - docker build -f frontend/Dockerfile -t $FRONTEND_IMAGE .
    - docker push $FRONTEND_IMAGE
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'

build_backend:
  stage: build
  image: golang:1.21-alpine  # Backend build uses Go
  script:
    - cd backend
    - go mod download  # Download dependencies
    - go build -o main .  # Build the Go binary
  artifacts:
    paths:
      - backend/main  # Save the Go binary as an artifact

deploy:
  stage: deploy
  dependencies:
    - build_frontend  # Ensure this job runs after build_frontend
  script:
    - echo "Deploying to GitLab Pages..."
    - mkdir -p public  # Create the public directory on the host
    - docker run --rm -v "$(pwd)/public:/public" $FRONTEND_IMAGE sh -c "cd /app/build && tar -cf - . | tar -xf - -C /public"
    - cp -r backend/bin/* public/api  # Copy backend files if needed
  artifacts:
    paths:
      - public  # Save the public directory as an artifact
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
