image: node:16  # Use a Node.js image for the frontend build

stages:
  - build_frontend
  - build_backend
  - deploy_frontend
  - deploy_backend

# Define the DEPLOY_FRONTEND variable internally (set to false by default)
variables:
  DEPLOY_FRONTEND: "true"  # Frontend deployment is enabled by default
  DEPLOY_BACKEND: "false"  # Backend deployment is disabled by default
  CI_REGISTRY: registry.gitlab.com
  FRONTEND_IMAGE: $CI_REGISTRY/rezav/rezaverse/frontend
  BACKEND_IMAGE: $CI_REGISTRY/rezav/rezaverse/backend

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - frontend/node_modules/  # Cache node_modules for faster builds

# Debug: Print the value of DEPLOY_FRONTEND and DEPLOY_BACKEND


# Debug: List files in the repository
debug_files:
  stage: build_backend
  script:
    - echo "Listing files in the repository..."
    - ls -R
  rules:
    - if: '$DEPLOY_BACKEND == "true" || $CI_COMMIT_REF_NAME == "main"'
      when: always
    - when: never

# Build Frontend
build_frontend:
  stage: build_frontend
  script:
    - echo "Installing frontend dependencies..."
    - cd frontend && npm install
    - echo "Building the frontend..."
    - npm run build
    - echo "Listing files in the build directory..."
    - ls -R build/  # Verify the build directory structure
  artifacts:
    paths:
      - frontend/build/  # Save the build directory as an artifact
  rules:
    - if: '$DEPLOY_FRONTEND == "true"'
      when: always
    - when: never

# Build Backend Docker Image
build_backend:
  stage: build_backend
  script:
    - echo "Building backend Docker image..."
    - >
      docker build \
        --build-arg API_PORT="8080" \
        --build-arg STATIC_PATH="/app/dist" \
        --build-arg DB_HOST="db-shopa-do-user-10123840-0.b.db.ondigitalocean.com" \
        --build-arg DB_PORT="25060" \
        -t $BACKEND_IMAGE ./backend
    - echo "Pushing backend Docker image to GitLab Container Registry..."
    - docker push $BACKEND_IMAGE
  rules:
    - if: '$DEPLOY_BACKEND == "true" || $CI_COMMIT_REF_NAME == "main"'
      when: always
    - when: never

# Deploy Frontend to GitLab Pages
deploy_frontend:
  stage: deploy_frontend
  dependencies:
    - build_frontend  # Ensure this job runs after the build_frontend job
  script:
    - echo "Deploying frontend to GitLab Pages..."
    - rm -rf public  # Clean up the public directory if it exists
    - mkdir -p public  # Create the public directory
    - echo "Copying build files to public directory..."
    - cp -r frontend/build/* public/  # Copy the build files to the public directory
    - echo "Creating 404.html for client-side routing..."
    - cp public/index.html public/404.html  # Handle client-side routing for GitLab Pages
    - echo "Listing files in the public directory..."
    - ls -R public/  # Verify the public directory structure
  artifacts:
    paths:
      - public/  # Deploy the public directory to GitLab Pages
  rules:
    - if: '$DEPLOY_FRONTEND == "true" || $CI_COMMIT_REF_NAME == "main"'
      when: always
    - when: never

# Deploy Backend (Example: Deploy to Kubernetes or another platform)
deploy_backend:
  stage: deploy_backend
  script:
    - echo "Deploying backend..."
    # Add your backend deployment script here (e.g., deploy to Kubernetes, DigitalOcean, etc.)
    # Example:
    # kubectl apply -f backend-deployment.yaml
  rules:
    - if: '$DEPLOY_BACKEND == "true" || $CI_COMMIT_REF_NAME == "main"'
      when: always
    - when: never